import type {JSONObject} from './types'
import {CombinedMessages} from './core/combined-messages'
import {RuntimeGenerationParams, RuntimeMethods} from "./treeShakeGenerator";
import {GenerationOptions} from "./core/generation-coordinator";


/**
 * Create .d.ts content for type definitions only
 */
export function toTypesContent(params: {
  combinedMessages: CombinedMessages<string, JSONObject>;
  config?: GenerationOptions;
}): string {
  const {
    combinedMessages,
    config,
  } = params
  const sourceId = config?.sourceId ?? '@vue-i18n-types'
  // Use CombinedMessages properties directly
  const contentId = combinedMessages.keysId


  const autogenerated =
    (config?.banner ?? //// @ts-nocheck
      `/* eslint-disable */
       /* prettier-ignore */
      // @formatter:off
      // biome-ignore lint: disable
      // AUTO-GENERATED FILE. DO NOT EDIT.
      // Content-Hash: ${contentId}
`.split('\n').map(l => l.trim()).filter(l => l).join('\n') + '\n\n')

  const NL = '\n'
     const baseLocaleMessages = combinedMessages.baseLocaleMessages;
  const finalKeys = combinedMessages.keys;
  const AllSupportedLanguages = combinedMessages.languages;

  // Type definitions only - build with array for better performance
  const bodyLines = [
    '// types content',
    `declare module '${sourceId}' {`,
    '  import {type Plugin, type WritableComputedRef} from \'vue\'',
    '  import type {  Composer,  ComposerOptions as Options,  ComposerOptions,  I18n,  I18nOptions,  Locale, NamedValue, TranslateOptions, UseI18nOptions} from "vue-i18n"',
    '  import type {MessageSchemaGen, MessagesType, AllTranslations, AllTranslationKeys, SupportedLanguage} from "virtual:vue-i18n-types/messages"',
    '  export type TranslateParams = (string | number | undefined | null) | Record<string, unknown>',
    `  export interface I18nCustom {  (key: AllTranslationKeys, plural: number, options?: TranslateOptions): string
      (key: AllTranslationKeys, options?: TranslateOptions): string
      (key: AllTranslationKeys, defaultMsg?: string): string
      (key: AllTranslationKeys, defaultMsg: string, options?: TranslateOptions): string
      (key: AllTranslationKeys, named: NamedValue, defaultMsg?: string): string
      (key: AllTranslationKeys, named: NamedValue, plural?: number): string
      (key: AllTranslationKeys, named: NamedValue, options?: TranslateOptions): string
      (key: AllTranslationKeys, plural: number, named: NamedValue): string
      (key: AllTranslationKeys, plural: number, defaultMsg: string): string
    }`,
    '  // I18n config options (excludes messages as they\'re provided by the plugin)',
    '  export type I18nConfigOptions = Omit<I18nOptions<MessageSchemaGen, {}, {}, SupportedLanguage, false>, \'messages\'>;',
    "  export type UseI18nTypesafeReturn = Omit<Composer<NonNullable<Options['messages']>, NonNullable<Options['datetimeFormats']>, NonNullable<Options['numberFormats']>, Options['locale'] extends unknown ? string : Options['locale']>,'t'> & { t: I18nCustom};",
    '  function createI18nInstance<T extends Partial<ComposerOptions> >(options?: T): I18n<MessagesType, T["datetimeFormats"] extends Record<string, unknown> ? T["datetimeFormats"] : object, T["numberFormats"] extends Record<string, unknown> ? T["numberFormats"]: object, T["locale"] extends string ? T["locale"] : Locale, false>',
    '  function createI18nInstancePlugin<T extends Partial<ComposerOptions>&I18nOptions >(options?: T): Plugin<unknown[]>&( I18n<AllTranslations, T["datetimeFormats"] extends Record<string,unknown> ? T["datetimeFormats"] : object, T["numberFormats"] extends Record<string, unknown> ? T["numberFormats"] : object, T["locale"] extends string ? T["locale"] : Locale, false> )',
    '  export const languages: SupportedLanguage[] | AllSupportedLanguages' ,

    '  export type SupportedLanguage = AllSupportedLanguages[number]',
    `  export type AllTranslationKeys = ${finalKeys.length ? `'${finalKeys.join(`' | '`)}'` : 'never'}`,
    `  export type AllSupportedLanguages = readonly [${AllSupportedLanguages.map(l => `'${l}'`).join(', ')}]`,
    `  export type MessageSchemaGen = ${JSON.stringify(baseLocaleMessages)}`,
    `  export type I18nMessages = Readonly<Record<SupportedLanguage, MessageSchemaGen>>`,
    `  export type AllTranslations = I18nMessages`,
    `  export type MessagesType = I18nMessages`,
    `  export const supportedLanguages: typeof AllSupportedLanguages`,
    `  export const useI18nApp: ()=> UseI18nTypesafeReturn`,
    `  function useI18nTypeSafe(options?: Omit<UseI18nOptions, 'messages'>):UseI18nTypesafeReturn;`,
    ` // export const supportedLanguages: SupportedLanguage[] | AllSupportedLanguages;`,

    '  export {  createI18nInstance,  createI18nInstancePlugin, useI18nTypeSafe };',
    '}\n\n',
    `declare module '${sourceId}/messages' {`,
    `  export * from 'virtual:vue-i18n-types';`,
    '  export const messages: MessagesType;',
    '  export default messages;',

    '}',

  ];

  return (autogenerated + bodyLines.join(NL)).replace(/\r\n/g, NL).replace(/\r/g, NL).replace(/\n*$/, '\n')
}



/**
 * Generate virtual module file content for physical file generation
 */
export function toVirtualModuleContent(opts: RuntimeGenerationParams, messagesCombined: CombinedMessages): string {
return createVirtualModuleCode(opts,messagesCombined).toFileContent('messages');
}


/**
 * Emit **pure JS** (no TS annotations, no 'as const').
 * Rollup will replace 'import.meta.ROLLUP_FILE_URL_<ref>' in build.
 */
export function createVirtualModuleCode(opts: RuntimeGenerationParams, messagesCombined: CombinedMessages): RuntimeMethods {

const messageMethods = new RuntimeMethods(opts, messagesCombined)
  return messageMethods

}

import type {JSONObject} from '../types'
import {CombinedMessages} from '../core/combined-messages'
import {RuntimeGenerationParams, RuntimeMethods} from "./treeShakeGenerator";
import {GenerationOptions} from "../core/generation-coordinator";


/**
 * Create .d.ts content for type definitions only
 */
export function toTypesContent(params: {
  combinedMessages: CombinedMessages<string, JSONObject>;
  config?: GenerationOptions;
}): string {
  const {
    combinedMessages,
    config,
  } = params
  const sourceId = config?.sourceId ?? '@vue-i18n-types'
  // Use CombinedMessages properties directly
  const contentId = combinedMessages.keysId


  const autogenerated =
    (config?.banner ?? //// @ts-nocheck
      `/* eslint-disable */
       /* prettier-ignore */
      // @formatter:off
      // biome-ignore lint: disable
      // AUTO-GENERATED FILE. DO NOT EDIT.
      // Content-Hash: ${contentId}
`.split('\n').map(l => l.trim()).filter(l => l).join('\n') + '\n\n')

  const NL = '\n'
  const baseLocaleMessages = combinedMessages.baseLocaleMessages;
  const finalKeys = combinedMessages.keys;
  const availableLocales = combinedMessages.languages;

  // Type definitions only - build with array for better performance
  const bodyLines = [
    '// types content',
`declare module '${sourceId}' {
   import {type Plugin, type WritableComputedRef} from 'vue'
   import { availableLocales } from '${sourceId}/availableLocales'
   import type {  Composer, Locale, FallbackLocale, ComposerOptions as Options, ComposerOptions, I18n, I18nOptions, NamedValue, TranslateOptions, UseI18nOptions} from "vue-i18n"
   import type { MessagesType,AllTranslations,AllTranslationKeys,I18nMessages,MessageSchemaGen} from '${sourceId}/messages'
   export type { MessagesType,AllTranslations,AllTranslationKeys,I18nMessages,MessageSchemaGen} from '${sourceId}/messages'
   import type { AvailableLocale,AvailableLocales} from '${sourceId}/availableLocales'
   export type { AvailableLocale,AvailableLocales} from '${sourceId}/availableLocales'
   export interface I18nCustom {  (key: AllTranslationKeys, plural: number, options?: TranslateOptions): string
      (key: AllTranslationKeys, options?: TranslateOptions): string
      (key: AllTranslationKeys, defaultMsg?: string): string
      (key: AllTranslationKeys, defaultMsg: string, options?: TranslateOptions): string
      (key: AllTranslationKeys, named: NamedValue, defaultMsg?: string): string
      (key: AllTranslationKeys, named: NamedValue, plural?: number): string
      (key: AllTranslationKeys, named: NamedValue, options?: TranslateOptions): string
      (key: AllTranslationKeys, plural: number, named: NamedValue): string
      (key: AllTranslationKeys, plural: number, defaultMsg: string): string
  }
  export type UseI18nTypesafeReturn = Omit<Composer<NonNullable<Options['messages']>, NonNullable<Options['datetimeFormats']>, NonNullable<Options['numberFormats']>, Options['locale'] extends unknown ? string : Options['locale']>,'t'> & { t: I18nCustom};
  export function createI18nInstance<T extends Partial<ComposerOptions> >(options?: T):
      I18n<MessagesType, T["datetimeFormats"] extends Record<string, unknown> ? T["datetimeFormats"] : object, T["numberFormats"] extends Record<string, unknown> ? T["numberFormats"]: object, T["locale"] extends string ? T["locale"] : Locale, false>
  export function createI18nInstancePlugin<T extends Partial<ComposerOptions>&I18nOptions >(options?: T):
      Plugin<unknown[]>&( I18n<AllTranslations, T["datetimeFormats"] extends Record<string,unknown> ? T["datetimeFormats"] : object, T["numberFormats"] extends Record<string, unknown> ? T["numberFormats"] : object, T["locale"] extends string ? T["locale"] : Locale, false> )

  export {fallbackLocales} from '${sourceId}/fallbackLocales'
  export {availableLocales} from '${sourceId}/availableLocales'
  export {messages} from '${sourceId}/messages'
  export const useI18nApp: ()=> UseI18nTypesafeReturn
  export function useI18nTypeSafe(options?: Omit<UseI18nOptions, 'messages'>):UseI18nTypesafeReturn;
}

declare module '${sourceId}/messages' {
  export type AllTranslationKeys = ${finalKeys.length ? `'${finalKeys.join(`' | '`)}'` : 'never'}
  export type I18nMessages = Readonly<Record<AvailableLocale, MessageSchemaGen>>
  export type AllTranslations = I18nMessages
  export type MessagesType = I18nMessages
  export type MessageSchemaGen = ${JSON.stringify(baseLocaleMessages)}
  export const messages: MessagesType;
  export default messages;
}
declare module '${sourceId}/availableLocales' {
  export type AvailableLocale = AvailableLocales[number]
  export type AvailableLocales = readonly [${availableLocales.map(l => `'${l}'`).join(', ')}]
  export const availableLocales: AvailableLocales;
  export default availableLocales;
}
declare module '${sourceId}/fallbackLocales' {
  import type { Locale } from "vue-i18n";
  export const fallbackLocales: { [locale in string]: Locale[];}
  export default fallbackLocales;
}
declare module '${sourceId}/createI18nInstance' {
  import type {createI18nInstance as ImportedType} from '${sourceId}'
  export const createI18nInstance: ImportedType
  export default createI18nInstance;
}
declare module '${sourceId}/createI18nInstancePlugin' {
  import type {createI18nInstancePlugin as ImportedType} from '${sourceId}'
  export const createI18nInstancePlugin: ImportedType
  export default createI18nInstancePlugin;
}
declare module '${sourceId}/useI18nTypeSafe' {
  import type {useI18nTypeSafe as ImportedType} from '${sourceId}'
  export const useI18nTypeSafe: ImportedType
  export default useI18nTypeSafe;
}
`,




  ];

  return (autogenerated + bodyLines.join(NL)).replace(/\r\n/g, NL).replace(/\r/g, NL).replace(/\n*$/, '\n')
}



/**
 * Generate virtual module file content for physical file generation
 */
export function toVirtualModuleContent(opts: RuntimeGenerationParams, messagesCombined: CombinedMessages): string {
return createVirtualModuleCode(opts,messagesCombined).toFileContent('messages');
}


/**
 * Emit **pure JS** (no TS annotations, no 'as const').
 * Rollup will replace 'import.meta.ROLLUP_FILE_URL_<ref>' in build.
 */
export function createVirtualModuleCode(opts: RuntimeGenerationParams, messagesCombined: CombinedMessages): RuntimeMethods {

const messageMethods = new RuntimeMethods(opts, messagesCombined)
  return messageMethods

}
